// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Migrations_Runtime_MySql;

namespace Migrations_Runtime_MySql.Migrations.MetadataDbContext_MySqlMigrations
{
    [DbContext(typeof(MetadataDbContext_MySql))]
    [Migration("20200519160040_UniqueIndexForUsers")]
    partial class UniqueIndexForUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.AdditionalBehavior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Definition")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("additionalbehaviors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "DisplayAsDate"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DisplayAsDateTime"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SetTimeOnInsert"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SetTimeOnUpdate"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ShowDatePicker"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ShowDateTimePicker"
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.AppInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DataConnectionString")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DatabaseProviderId")
                        .HasColumnType("int");

                    b.Property<string>("DbContextName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GeneratedCodeNamespace")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsProduction")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LobConnectionString")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MetadataReleaseId")
                        .HasColumnType("int");

                    b.Property<bool>("MigrateDatabase")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("UseUnreleasedMetadata")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AppTypeId");

                    b.HasIndex("DatabaseProviderId");

                    b.HasIndex("MetadataReleaseId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("appinstances");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.AppType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("apptypes");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.DataType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClrType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsValueType")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("datatypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClrType = "System.Int32",
                            Identifier = "int",
                            IsValueType = true,
                            Name = "Integer"
                        },
                        new
                        {
                            Id = 2,
                            ClrType = "System.String",
                            Identifier = "string",
                            IsValueType = false,
                            Name = "String"
                        },
                        new
                        {
                            Id = 3,
                            ClrType = "System.Boolean",
                            Identifier = "bool",
                            IsValueType = true,
                            Name = "Boolean"
                        },
                        new
                        {
                            Id = 4,
                            ClrType = "System.DateTime",
                            Identifier = "Date",
                            IsValueType = true,
                            Name = "Date"
                        },
                        new
                        {
                            Id = 5,
                            ClrType = "System.TimeSpan",
                            Identifier = "Time",
                            IsValueType = true,
                            Name = "Time Of Day"
                        },
                        new
                        {
                            Id = 6,
                            ClrType = "System.DateTime",
                            Identifier = "DateTime",
                            IsValueType = true,
                            Name = "Date and Time"
                        },
                        new
                        {
                            Id = 7,
                            Identifier = "ForeignKey",
                            IsValueType = true,
                            Name = "Foreign Key"
                        },
                        new
                        {
                            Id = 8,
                            Identifier = "NavigationEntity",
                            IsValueType = false,
                            Name = "Navigation Property"
                        },
                        new
                        {
                            Id = 9,
                            Identifier = "Enum",
                            IsValueType = true,
                            Name = "Enum"
                        },
                        new
                        {
                            Id = 10,
                            Identifier = "NavigationList",
                            IsValueType = false,
                            Name = "Navigation List"
                        },
                        new
                        {
                            Id = 11,
                            ClrType = "System.Guid",
                            Identifier = "Guid",
                            IsValueType = true,
                            Name = "Guid"
                        },
                        new
                        {
                            Id = 12,
                            ClrType = "System.Decimal",
                            Identifier = "decimal",
                            IsValueType = true,
                            Name = "Decimal"
                        },
                        new
                        {
                            Id = 13,
                            ClrType = "System.Int64",
                            Identifier = "long",
                            IsValueType = true,
                            Name = "Long Integer"
                        },
                        new
                        {
                            Id = 14,
                            ClrType = "System.Int16",
                            Identifier = "short",
                            IsValueType = true,
                            Name = "Short Integer"
                        },
                        new
                        {
                            Id = 15,
                            ClrType = "System.Byte",
                            Identifier = "byte",
                            IsValueType = true,
                            Name = "Tiny Integer"
                        },
                        new
                        {
                            Id = 16,
                            ClrType = "System.Double",
                            Identifier = "double",
                            IsValueType = true,
                            Name = "Double"
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.DatabaseProvider", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("databaseproviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "MySql"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SqlServer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PostgreSql"
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityActionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("entityactiontypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GetMetadata"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Select"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Insert"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ManageMetadata"
                        },
                        new
                        {
                            Id = 7,
                            Name = "CustomNamedAction"
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("BaseEntityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CodePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DisplayNamePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("GeneralUsageCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("PluralTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SchemaName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SingularTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TableName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BaseEntityTypeId");

                    b.HasIndex("GeneralUsageCategoryId");

                    b.HasIndex("AppTypeId", "Name")
                        .IsUnique();

                    b.ToTable("entitytypes");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityTypeFacetDefaultValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("AppTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FacetDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("GeneralUsageCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppInstanceId");

                    b.HasIndex("AppTypeId");

                    b.HasIndex("FacetDefinitionId");

                    b.HasIndex("GeneralUsageCategoryId");

                    b.ToTable("entitytypefacetdefaultvalues");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityTypeFacetDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("EnumTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FacetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("EnumTypeId");

                    b.HasIndex("FacetTypeId");

                    b.ToTable("entitytypefacetdefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FacetTypeId = 1,
                            Name = "NotMapped"
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityTypeFacetValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FacetDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("FacetDefinitionId");

                    b.ToTable("entitytypefacetvalues");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityTypeGeneralUsageCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("entitytypegeneralusagecategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "WorkingData"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BasicInfo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Model"
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EnumType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("enumtypes");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EnumValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EnumTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("EnumTypeId");

                    b.ToTable("enumvalues");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.ExpressionBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("FormatId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvalidationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("FormatId");

                    b.ToTable("expressionbodies");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.ExpressionDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ActiveBodyId")
                        .HasColumnType("int");

                    b.Property<int>("AppTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("LongDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MainInputEntityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ActiveBodyId");

                    b.HasIndex("MainInputEntityTypeId");

                    b.HasIndex("AppTypeId", "Identifier")
                        .IsUnique();

                    b.ToTable("expressiondefinitions");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.ExpressionFormat", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("expressionformats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Identifier = "SimplePath",
                            Title = "Simple Path"
                        },
                        new
                        {
                            Id = 2,
                            Identifier = "Json",
                            Title = "Json"
                        },
                        new
                        {
                            Id = 3,
                            Identifier = "C#",
                            Title = "C#"
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.FacetType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("facettypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Identifier = "bool",
                            Name = "Boolean"
                        },
                        new
                        {
                            Id = 2,
                            Identifier = "int",
                            Name = "Integer"
                        },
                        new
                        {
                            Id = 3,
                            Identifier = "string",
                            Name = "String"
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.MetadataRelease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("MetadataSnapshot")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("ReleaseTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Version")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("VersionCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppTypeId");

                    b.ToTable("metadatareleases");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DataEntityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpressionDefinitionId")
                        .HasColumnType("int");

                    b.Property<int?>("ForeignKeyPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("GeneralUsageCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("InversePropertyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsExpression")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("OwnerEntityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DataEntityTypeId");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("ExpressionDefinitionId");

                    b.HasIndex("ForeignKeyPropertyId");

                    b.HasIndex("GeneralUsageCategoryId");

                    b.HasIndex("InversePropertyId");

                    b.HasIndex("OwnerEntityTypeId", "Name")
                        .IsUnique();

                    b.ToTable("properties");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyBehavior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdditionalBehaviorId")
                        .HasColumnType("int");

                    b.Property<string>("Parameters")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalBehaviorId");

                    b.HasIndex("PropertyId");

                    b.ToTable("propertybehaviors");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyFacetDefaultValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("AppTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FacetDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("GeneralUsageCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppInstanceId");

                    b.HasIndex("AppTypeId");

                    b.HasIndex("FacetDefinitionId");

                    b.HasIndex("GeneralUsageCategoryId");

                    b.ToTable("propertyfacetdefaultvalues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultValue = "false",
                            FacetDefinitionId = 1,
                            GeneralUsageCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            DefaultValue = "true",
                            FacetDefinitionId = 1,
                            GeneralUsageCategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            DefaultValue = "false",
                            FacetDefinitionId = 2,
                            GeneralUsageCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            DefaultValue = "true",
                            FacetDefinitionId = 2,
                            GeneralUsageCategoryId = 2
                        },
                        new
                        {
                            Id = 5,
                            DefaultValue = "false",
                            FacetDefinitionId = 3,
                            GeneralUsageCategoryId = 2
                        },
                        new
                        {
                            Id = 6,
                            DefaultValue = "true",
                            FacetDefinitionId = 4,
                            GeneralUsageCategoryId = 2
                        },
                        new
                        {
                            Id = 7,
                            DefaultValue = "true",
                            FacetDefinitionId = 5,
                            GeneralUsageCategoryId = 2
                        },
                        new
                        {
                            Id = 8,
                            DefaultValue = "true",
                            FacetDefinitionId = 4,
                            GeneralUsageCategoryId = 5
                        },
                        new
                        {
                            Id = 9,
                            DefaultValue = "true",
                            FacetDefinitionId = 4,
                            GeneralUsageCategoryId = 4
                        },
                        new
                        {
                            Id = 10,
                            DefaultValue = "false",
                            FacetDefinitionId = 3,
                            GeneralUsageCategoryId = 4
                        },
                        new
                        {
                            Id = 11,
                            DefaultValue = "false",
                            FacetDefinitionId = 3,
                            GeneralUsageCategoryId = 5
                        },
                        new
                        {
                            Id = 12,
                            DefaultValue = "true",
                            FacetDefinitionId = 1,
                            GeneralUsageCategoryId = 5
                        },
                        new
                        {
                            Id = 13,
                            DefaultValue = "true",
                            FacetDefinitionId = 2,
                            GeneralUsageCategoryId = 5
                        },
                        new
                        {
                            Id = 14,
                            DefaultValue = "true",
                            FacetDefinitionId = 1,
                            GeneralUsageCategoryId = 4
                        },
                        new
                        {
                            Id = 15,
                            DefaultValue = "true",
                            FacetDefinitionId = 2,
                            GeneralUsageCategoryId = 4
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyFacetDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("EnumTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FacetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("EnumTypeId");

                    b.HasIndex("FacetTypeId");

                    b.ToTable("propertyfacetdefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FacetTypeId = 1,
                            Name = "HideInInsert"
                        },
                        new
                        {
                            Id = 2,
                            FacetTypeId = 1,
                            Name = "HideInEdit"
                        },
                        new
                        {
                            Id = 3,
                            FacetTypeId = 1,
                            Name = "IsRequired"
                        },
                        new
                        {
                            Id = 4,
                            FacetTypeId = 1,
                            Name = "HideInList"
                        },
                        new
                        {
                            Id = 5,
                            FacetTypeId = 1,
                            Name = "ReadOnlyInEdit"
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyFacetValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FacetDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("FacetDefinitionId");

                    b.HasIndex("PropertyId");

                    b.ToTable("propertyfacetvalues");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyGeneralUsageCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("propertygeneralusagecategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "NormalData"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PrimaryKey"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ForeignKey"
                        },
                        new
                        {
                            Id = 4,
                            Name = "NavigationProperty"
                        },
                        new
                        {
                            Id = 5,
                            Name = "NavigationList"
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.Reporting.ReportDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Definition")
                        .HasColumnType("longblob");

                    b.Property<string>("DefinitionUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ReportFormatId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("ReportFormatId");

                    b.ToTable("reportdefinitions");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.Reporting.ReportFormat", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("reportformats");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.SavedFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("InputEntityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InputEntityTypeId");

                    b.ToTable("savedfilters");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.Security.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionName")
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AppInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionType")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("AppInstanceId");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionType = 1,
                            RoleId = new Guid("7555dd25-ee7f-4a21-9156-3867dcbced77")
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.Security.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e17424d-9a7c-44ee-962e-0a0e12176cff"),
                            Name = "Anonymous"
                        },
                        new
                        {
                            Id = new Guid("7555dd25-ee7f-4a21-9156-3867dcbced77"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ExternalUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UnifiedExternalUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UnifiedExternalUserId")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.AppInstance", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.AppType", "AppType")
                        .WithMany()
                        .HasForeignKey("AppTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.DatabaseProvider", "DatabaseProvider")
                        .WithMany()
                        .HasForeignKey("DatabaseProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.MetadataRelease", "MetadataRelease")
                        .WithMany()
                        .HasForeignKey("MetadataReleaseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityType", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.AppType", "AppType")
                        .WithMany()
                        .HasForeignKey("AppTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityType", "BaseEntityType")
                        .WithMany()
                        .HasForeignKey("BaseEntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityTypeGeneralUsageCategory", "GeneralUsageCategory")
                        .WithMany()
                        .HasForeignKey("GeneralUsageCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityTypeFacetDefaultValue", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.AppInstance", "AppInstance")
                        .WithMany()
                        .HasForeignKey("AppInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.AppType", "AppType")
                        .WithMany()
                        .HasForeignKey("AppTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityTypeFacetDefinition", "FacetDefinition")
                        .WithMany()
                        .HasForeignKey("FacetDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityTypeGeneralUsageCategory", "GeneralUsageCategory")
                        .WithMany()
                        .HasForeignKey("GeneralUsageCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityTypeFacetDefinition", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EnumType", "EnumType")
                        .WithMany()
                        .HasForeignKey("EnumTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.FacetType", "FacetType")
                        .WithMany()
                        .HasForeignKey("FacetTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityTypeFacetValue", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityType", "EntityType")
                        .WithMany("FacetValues")
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityTypeFacetDefinition", "FacetDefinition")
                        .WithMany()
                        .HasForeignKey("FacetDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.EnumValue", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EnumType", "EnumType")
                        .WithMany("Values")
                        .HasForeignKey("EnumTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.ExpressionBody", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.ExpressionDefinition", "Definition")
                        .WithMany("Bodies")
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.ExpressionFormat", "Format")
                        .WithMany()
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.ExpressionDefinition", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.ExpressionBody", "ActiveBody")
                        .WithMany()
                        .HasForeignKey("ActiveBodyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.AppType", "AppType")
                        .WithMany()
                        .HasForeignKey("AppTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityType", "MainInputEntityType")
                        .WithMany()
                        .HasForeignKey("MainInputEntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.MetadataRelease", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.AppType", "AppType")
                        .WithMany()
                        .HasForeignKey("AppTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.Property", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityType", "DataEntityType")
                        .WithMany()
                        .HasForeignKey("DataEntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.ExpressionDefinition", "ExpressionDefinition")
                        .WithMany()
                        .HasForeignKey("ExpressionDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.Property", "ForeignKeyProperty")
                        .WithMany("Unused1")
                        .HasForeignKey("ForeignKeyPropertyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyGeneralUsageCategory", "GeneralUsageCategory")
                        .WithMany()
                        .HasForeignKey("GeneralUsageCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.Property", "InverseProperty")
                        .WithMany("Unused2")
                        .HasForeignKey("InversePropertyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityType", "OwnerEntityType")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerEntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyBehavior", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.AdditionalBehavior", "AdditionalBehavior")
                        .WithMany()
                        .HasForeignKey("AdditionalBehaviorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.Property", "Property")
                        .WithMany("PropertyBehaviors")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyFacetDefaultValue", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.AppInstance", "AppInstance")
                        .WithMany()
                        .HasForeignKey("AppInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.AppType", "AppType")
                        .WithMany()
                        .HasForeignKey("AppTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyFacetDefinition", "FacetDefinition")
                        .WithMany()
                        .HasForeignKey("FacetDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyGeneralUsageCategory", "GeneralUsageCategory")
                        .WithMany()
                        .HasForeignKey("GeneralUsageCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyFacetDefinition", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EnumType", "EnumType")
                        .WithMany()
                        .HasForeignKey("EnumTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.FacetType", "FacetType")
                        .WithMany()
                        .HasForeignKey("FacetTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyFacetValue", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.PropertyFacetDefinition", "FacetDefinition")
                        .WithMany()
                        .HasForeignKey("FacetDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.Property", "Property")
                        .WithMany("PropertyFacetValues")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.Reporting.ReportDefinition", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.Reporting.ReportFormat", "Format")
                        .WithMany()
                        .HasForeignKey("ReportFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.SavedFilter", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityType", "InputEntityType")
                        .WithMany()
                        .HasForeignKey("InputEntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Brainvest.Dscribe.MetadataDbAccess.Entities.Security.Permission", b =>
                {
                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.AppInstance", "AppInstance")
                        .WithMany()
                        .HasForeignKey("AppInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brainvest.Dscribe.MetadataDbAccess.Entities.Security.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
