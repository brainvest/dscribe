// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Migrations_Runtime_MySql;

namespace Migrations_Runtime_MySql.Migrations
{
    [DbContext(typeof(LobToolsDbContext_MySql))]
    partial class LobToolsDbContext_MySqlModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Brainvest.Dscribe.LobTools.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Data")
                        .HasColumnType("longblob");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Identifier")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("Brainvest.Dscribe.LobTools.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Identifier")
                        .HasColumnType("int");

                    b.Property<long?>("RequestLogId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Brainvest.Dscribe.LobTools.Entities.DataLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DataId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DataRequestAction")
                        .HasColumnType("int");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestLogId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequestLogId");

                    b.ToTable("datalogs");
                });

            modelBuilder.Entity("Brainvest.Dscribe.LobTools.Entities.Draft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("Identifier")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsLastVersion")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JsonData")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("OwnerUserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("drafts");
                });

            modelBuilder.Entity("Brainvest.Dscribe.LobTools.Entities.RequestLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("AppInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("AppTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ExceptionTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Failed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HadException")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Method")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("ProcessDuration")
                        .HasColumnType("double");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("QueryString")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("RequestSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Response")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("ResponseSize")
                        .HasColumnType("bigint");

                    b.Property<int>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("requestlogs");
                });

            modelBuilder.Entity("Brainvest.Dscribe.LobTools.Entities.DataLog", b =>
                {
                    b.HasOne("Brainvest.Dscribe.LobTools.Entities.RequestLog", "RequestLog")
                        .WithMany("DataLogs")
                        .HasForeignKey("RequestLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
